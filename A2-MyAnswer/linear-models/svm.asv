function [w, num] = svm(X, y)
%SVM Support vector machine.
%
%   INPUT:  X: training sample features, P-by-N matrix.
%           y: training sample labels, 1-by-N row vector.
%
%   OUTPUT: w:    learned perceptron parameters, (P+1)-by-1 column vector.
%           num:  number of support vectors
%

% YOUR CODE HERE

size_x = size(X);
X = [ones(1, size_x(2));X];
H = eye(size(X, 1));
f = zeros(size(X, 1), 1);
new_y = [];
for i=1:size(X, 1)
    new_y = [new_y; y];
end
size(new_y);
A = - X' .* new_y';
b = -ones(size(X, 2), 1);
[w, fva,] = quadprog(H, f,A, b);
num=0;

% size_x = size(X);
% X = [ones(1, size_x(2));X];
% size_x = size(X);
% size_y = size(y);
% H = X * X';
% T = y * y';
% size(T)
% size(H)
% H = T * H;
% f = -ones(size_x(1), 1);
% lb = zeros(size_x(1),1);
% ub = inf*ones(size_x(1),1); 
% alpha = quadprog(H, f, [], [], y, 0, lb, ub);
% w = zeros(size_x(1),1);  
% for i = 1:size_x(2)     
%     w = w + alpha(i)*y(i)*X(:,i);%PRML 7.29  
% end
% r1 = inf;
% num1 = 0;
% r_1 = inf;
% num_1 = 0;
% for i =1:size_x(2)
%     r = y(1, i) * w'* X(:, i);
%     if y(1, i) == -1
%         if r == r_1
%             num_1 = num_1 + 1;
%         end
%         if r < r_1
%             num_1 = 0;
%             r_1 = r;
%         end
%     end
%     if y(1, i) == 1
%         if r == r1
%             num1 = num1 + 1;
%         end
%         if r < r1
%             num1 = 0;
%             r1 = r;
%         end
%     end
% end
% num = num1 + num_1;

end
